#version 300 es

precision mediump float;
precision mediump int;

in vec3 vertexNormal_modelspace;
in vec3 vertexPosition_modelspace;
in vec4 vertexColor;

out vec4 fragmentColor;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace[2];
out vec3 LightPosition_worldspace[2];

uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform float LightEnabled;

void main()
{
	fragmentColor = vertexColor;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position = MVP * vec4(vertexPosition_modelspace, 1.0);

	// Position of the vertex, in worldspace : M * position
	Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;
	
	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

	LightPosition_worldspace[0] = vec3(4,4,4);
	LightPosition_worldspace[1] = vec3(-4,4,-4);

	// Vector that goes from the vertex to the light, in camera space. M is omitted because it's identity.
	vec3 LightPosition0_cameraspace = ( V * vec4(LightPosition_worldspace[0],1)).xyz;
	vec3 LightPosition1_cameraspace = ( V * vec4(LightPosition_worldspace[1],1)).xyz;
	LightDirection_cameraspace[0] = LightPosition0_cameraspace + EyeDirection_cameraspace;
	LightDirection_cameraspace[1] = LightPosition1_cameraspace + EyeDirection_cameraspace;

	// Normal of the the vertex, in camera space
	Normal_cameraspace = ( V * M * vec4(vertexNormal_modelspace,0)).xyz;
		// Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
}
