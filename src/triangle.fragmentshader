#version 300 es

precision mediump float;
precision mediump int;

in vec4 fragmentColor;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace[2];
in vec3 LightPosition_worldspace[2];

out vec4 color;

uniform mat4 MV;
uniform float LightEnabled;

void main()
{
	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 34.0f;
	
	// Material properties
	vec3 MaterialDiffuseColor = fragmentColor.xyz;
	vec3 MaterialAmbientColor = vec3(0.3,0.3,0.3) * MaterialDiffuseColor;

	// Distance to the light
	float distance0 = length( LightPosition_worldspace[0] - Position_worldspace );
	float distance1 = length( LightPosition_worldspace[1] - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l0 = normalize( LightDirection_cameraspace[0] );
	vec3 l1 = normalize( LightDirection_cameraspace[1] );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta0 = clamp( dot( n,l0 ), 0.0, 1.0 );
	float cosTheta1 = clamp( dot( n,l1 ), 0.0, 1.0 );

	vec3 c3 = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * LightPower * cosTheta0 / (distance0*distance0) +
		MaterialDiffuseColor * LightColor * LightPower * cosTheta1 / (distance1*distance1);

	color = vec4(c3, 1.0) * LightEnabled + fragmentColor * (1.0 - LightEnabled);
}
